name: Build and deploy application

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  IMAGE_TAG: pingpong:latest
  # TODO: this is very ugly, but the array needs to be with object key-value pairs. It also needs to be escaped to pass into matrix context
  TARGET_NODES: '[{\"target\":\"64.226.110.192\"},{\"target\":\"64.226.110.193\"},{\"target\":\"64.226.84.47\"}]'

jobs:
  # build_and_push_to_registry:
  #   name: Build
  #   runs-on: ubuntu-latest
  #
  #   steps:
  #
  #   - name: Checkout code
  #     uses: actions/checkout@v3
  #
  #   - name: Log into container registry
  #     uses: docker/login-action@v2
  #     with:
  #       # registry: ${{ secrets.REGISTRY_URL }} ## docker hub address is the default
  #       username: ${{ secrets.REGISTRY_USERNAME }}
  #       password: ${{ secrets.REGISTRY_PASSWORD }}
  #
  #   - name: Build the Docker image
  #     run: docker build . --file Dockerfile --tag ${{secrets.REGISTRY_USERNAME}}/${{ env.IMAGE_TAG }}
  #
  #   - name: Push image to registry
  #     run: docker image push ${{ secrets.REGISTRY_USERNAME }}/${{ env.IMAGE_TAG }}

  prepare_entry_server:
    name: Prepare entrypoint
    # needs: build_and_push_to_registry
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up SSH agent
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Set up SSH known hosts 
      run: ssh-keyscan -H ${{ secrets.ENTRY_HOST }} > ~/.ssh/known_hosts

    - name: Copy deployment script to entry-server
      run: scp deploy/deploy.sh root@${{ secrets.ENTRY_HOST }}:/root/deploy.sh 
  
  prepare_node_list:
    name: Prepare Nodes
    needs: prepare_entry_server
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - id: set-matrix
      run: echo "matrix={\"include\":${{ env.TARGET_NODES }}}" >> $GITHUB_OUTPUT

  run_deployments:
    name: Deploy node
    needs: prepare_node_list
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.prepare_node_list.outputs.matrix)}}
    steps:
    - name:  Run a command on deployment target
      run: >
        echo "${{ matrix.target }}"
